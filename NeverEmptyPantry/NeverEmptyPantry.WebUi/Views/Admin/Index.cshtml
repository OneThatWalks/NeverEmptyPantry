@using NeverEmptyPantry.Common.Enum
@model NeverEmptyPantry.Common.Models.AdminIndexViewModel

<h3>Administration Dashboard</h3>
<hr />

<!-- Show lists created, processed and recently delivered items -->
<div class="row pb-5">
    <div class="col">
        <!-- First of three metrics-->
        <div class="card">
            <h5 class="card-header">Active Lists</h5>
            <div class="card-body">
                <p class="card-text text-center">active <span class="admin-metric-number">@Model.ActiveLists</span> total</p>
                <button type="button" class="btn btn-block" onclick="goToLocation('@Url.Action("Index", "List", new { state = OrderState.LIST_CREATED })')">Go To Lists</button>
            </div>
        </div>
    </div>
    <div class="col">
        <!-- Second of three metrics-->
        <div class="card">
            <h5 class="card-header">Waiting For Delivery</h5>
            <div class="card-body">
                <p class="card-text text-center"><span class="admin-metric-number">@Model.ProcessedLists</span> orders</p>
                <button type="button" class="btn btn-block" onclick="goToLocation('@Url.Action("Index", "List", new { state = OrderState.LIST_PROCESSED })')">Show List Pending Delivery</button>
            </div>
        </div>
    </div>
    <div class="col">
        <!-- Third of three metrics-->
        <div class="card">
            <h5 class="card-header">Recent Deliveries</h5>
            <div class="card-body">
                <p class="card-text text-center"><span class="admin-metric-number">@Model.DeliveredItems</span> items</p>
                <button type="button" class="btn btn-block" onclick="goToLocation('@Url.Action("Index", "List", new { state = OrderState.LIST_RECEIVED })')">Show Recently Delivered</button>
            </div>
        </div>
    </div>
</div>
<div class="row pb-5">
    <div class="col-12">
        <div class="card">
            <h5 class="card-header">Statistics</h5>
            <div class="card-body">
                <canvas id="myMetricChart"></canvas>
            </div>
        </div>
    </div>
</div>
<div class="row pb-5">
    <div class="col-6">
        <div class="card">
            <h5 class="card-header">Most Active Contributors</h5>
            <div class="card-body p-0">
                <ul class="contributor-list">
                    @foreach (var user in Model.Contributors)
                    {
                        if (user == null) { continue; }
                        <li class="contributor-bar">
                            <button class="btn btn-link" onclick="goToLocation('@Url.Action("Profile", "Account", new { email = user.Email })')">@user.FirstName @user.LastName</button>
                            <span class="contributor-options">Contributed Votes: @Model.GetContributorVotes(user.Email).Count</span>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
    <div class="col-6">
        <div class="card">
            <h5 class="card-header">Recent Votes</h5>
            <div class="card-body">

            </div>
        </div>
    </div>
</div>

<!-- Chart popular items and expected run out date based on metrics -->
<!-- Allow for other metrics -->

@section Scripts {
    <script type="text/javascript">
        var ctx = document.getElementById('myMetricChart').getContext('2d');

        var data = {
            labels: [],
            datasets: []
        };

        function getMetrics() {
            _get('@Url.Action("AdminMetrics", "Admin", new { type = "itempop" })',
                function(d) {
                    if (d) {
                        d.forEach(set => addData(myMetricChart, set));
                    }
                });
        }


        function addData(chart, data) {
            chart.data.labels.push(data.label);
            chart.data.datasets.push(data);
            chart.update();
        }

        function removeData(chart) {
            chart.data.labels.pop();
            chart.data.datasets.forEach((dataset) => {
                dataset.data.pop();
            });
            chart.update();
        }

        getMetrics();

        var options = {
            title: {
                display: true,
                text: "Item Popularity"
            },
            scales: {
                yAxes: [
                    {
                        scaleLabel: {
                            display: true,
                            labelString: "Order Consistency (% Occurence of items in all lists)"
                        }
                    }
                ],
                xAxes: [
                    {
                        scaleLabel: {
                            display: true,
                            labelString: "Average Severity"
                        }
                    }
                ]
            }
        };

        var myMetricChart = new Chart(ctx,
            {
                type: 'bubble',
                data: data,
                options: options
            });
    </script>
}